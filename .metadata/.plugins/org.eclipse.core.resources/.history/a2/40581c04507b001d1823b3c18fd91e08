package com.cyberark.conjur.clientapp.processor;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.BeansException;

import org.springframework.beans.factory.InitializingBean;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.config.BeanPostProcessor;
import org.springframework.context.ApplicationContext;
import org.springframework.context.ApplicationContextAware;
import org.springframework.context.EnvironmentAware;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.ConfigurableEnvironment;
import org.springframework.core.env.Environment;

import com.cyberark.conjur.clientapp.config.ConjurConfig;
import com.cyberark.conjur.clientapp.core.ConjurPropertySource;
import com.cyberark.conjur.clientapp.domain.ConjurAuthParam;
import com.cyberark.conjur.clientapp.service.CustomPropertySourceChain;
import com.cyberark.conjur.clientapp.service.DefaultPropertySourceChain;
import com.cyberark.conjur.clientapp.service.PropertyProcessorChain;


/**
 * The ValueProcess class will be invoked on boot strap of the applicaiton and
 * will invoke the process chain based on the properties. It call the default
 * property chain if value is found or will call the Custome propertysource to
 * retrieve the value from the Conjur vault . This class in turn will invoke the
 * ConjurPropertySource to autowire the value for @Value annotation
 * 
 *
 */

@Configuration
public class ValueProcess implements BeanPostProcessor, InitializingBean, EnvironmentAware, ApplicationContextAware {

	private Logger logger = LoggerFactory.getLogger(ValueProcess.class);

	private ApplicationContext context;

	private ConfigurableEnvironment environment;

	@Autowired
	private ConjurPropertySource propertySource;// = new ConjurPropertySource();

	@Autowired
	private ConjurAuthParam conjurParam;

	private PropertyProcessorChain processorChain;

	@Override
	public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {
		return bean;
	}

	@Override
	public void afterPropertiesSet() throws Exception {

		logger.info("AfterPropertiesSet>>"+conjurParam);

		this.processorChain = new DefaultPropertySourceChain();
		CustomPropertySourceChain customPS = new CustomPropertySourceChain();
		processorChain.setNextChain(customPS);

		// environment.getPropertySources().addLast(new ConjurPropertySource());
		environment.getPropertySources().addLast(processorChain);

		logger.info("Property Sources>>>" + environment.getPropertySources());

	}

	@Override
	public void setEnvironment(Environment environment) {
		// TODO Auto-generated method stub
		if (environment instanceof ConfigurableEnvironment) {

			this.environment = (ConfigurableEnvironment) environment;
			logger.info("Available environment>>>" + environment);
		}

	}

	@Override
	public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
		// TODO Auto-generated method stub
		this.context = applicationContext;

	}

	/*
	 * @Bean
	 * 
	 * @Lazy public PropertySourcesPlaceholderConfigurer
	 * getProperyPlaceHolderConfigurer() {
	 * System.out.println("callng placeholder config");
	 * PropertySourcesPlaceholderConfigurer cfg = new
	 * PropertySourcesPlaceholderConfigurer(); MutablePropertySources sources =
	 * environment.getPropertySources(); cfg.setPropertySources(sources);
	 * environment.setIgnoreUnresolvableNestedPlaceholders(true); return cfg;
	 * 
	 * }
	 */

	/*
	 * @Override public void postProcessBeanFactory(ConfigurableListableBeanFactory
	 * beanFactory) throws BeansException { // TODO Auto-generated method stub
	 * System.out.println("Bean Factory Post Processor");
	 * 
	 * environment.getPropertySources().addLast(new ConjurPropertySource());
	 * System.out.println("Property Sources>>>"+environment.getPropertySources());
	 * 
	 * }
	 */

}
